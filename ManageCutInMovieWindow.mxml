<?xml version="1.0" encoding="utf-8"?>
<torgtaitai:CommonPopupWindow
   xmlns:mx="http://www.adobe.com/2006/mxml"
   xmlns:torgtaitai="*" 
   width="350"
   height="280"
   title="{Language.s.cutIn}" 
   showCloseButton="true"
   >
  <mx:HBox width="100%" height="100%">
    
    <mx:Box width="100%" height="100%">
      <mx:HBox width="100%">
        <mx:Button label="{Language.s.sendButton}" click="sendCutIn()" />
        <mx:Spacer width="100%" />
        <mx:Button label="{Language.s.previewButton}" click="previewCutIn()" />
      </mx:HBox>
      
	  <mx:DataGrid id="cutInInfosList"
                   dragEnabled="{listDraggable.selected}"
                   dropEnabled="{listDraggable.selected}"
                   dragMoveEnabled="{listDraggable.selected}"
                   dragComplete="dragComplete(event)"
                   width="100%"
                   height="100%"
                   dataProvider="{ CutInBase.cutInInfos }"
                   editable="false"
		           draggableColumns="false"
                   doubleClickEnabled="true"
                   doubleClick="sendCutIn()"
                   allowMultipleSelection="true"
                   >
	    <mx:columns>
          <mx:DataGridColumn headerText="{Language.s.executeCutInWhenChatTailMatched}"
                             dataField="isTail"
                             textAlign="center"
                             width="40">
            <mx:itemRenderer>
              <mx:Component>
                <mx:CheckBox click="ManageCutInMovieWindow.changeEnableState(data)"  selected="{(data.isTail == null ? true : data.isTail)}"/>
              </mx:Component>
            </mx:itemRenderer>
          </mx:DataGridColumn>
		  <mx:DataGridColumn headerText="{Language.s.cutInTitle}"
                             dataField="message"
                             textAlign="center"
                             width="100"/>
		  <mx:DataGridColumn headerText="{Language.s.cutInImageFileName}"
                             dataField="source"
                             textAlign="center"
                             width="100"/>
		  <mx:DataGridColumn headerText="{Language.s.cutInSecond}"
                             dataField="displaySeconds"
                             textAlign="center"
                             width="20"/>
	    </mx:columns>
	  </mx:DataGrid>
      
      <mx:HBox id="editBox" height="30" width="100%" horizontalAlign="center" verticalAlign="middle">
        <mx:Button label="{Language.s.addButton}" click="addCutInEffect()" />
        <mx:Button label="{Language.s.changeButton}" click="changeCutInEffect()" />
        <mx:Button label="{Language.s.deleteButton}"  click="removeCutInEffect()" />
        <mx:Spacer width="100%" />
        <mx:CheckBox id="listDraggable"  selected="false"
                     label="{Language.s.cutinSortMoveable}"
                     toolTip="{Language.s.cutinSortMoveableTip}"/>
      </mx:HBox>
    </mx:Box>
    
  </mx:HBox>
  <mx:Script>
    <![CDATA[
    import mx.collections.ArrayCollection;
    import mx.containers.TitleWindow;
    import mx.managers.PopUpManager;
    import mx.controls.Alert;
    import mx.events.CloseEvent;
    import mx.events.DragEvent;
    
    private var cutIn:CutInMovie = new CutInMovie();

    override protected function setup():void {
        Log.loggingTuning("=>setup() Begin");
        try {
            Resizer.addResize(this,new Point(100,50));
            cutIn.setEffectable(true);
        } catch(error:Error) {
            this.status = error.message;
        }
        Log.loggingTuning("=>setup() End");
    }

    private function getCutInInfo():Object {
        status = "";
    
        var obj:Object = cutInInfosList.selectedItem;
        Log.logging("getCutInInfo selectedItem", obj);
        
        if( obj == null ) {
            status = Language.s.pleaseSelectCutIn;
                    
        }
        
        return obj;
    }

    private function previewCutIn():void {
        var cutInInfo:Object = getCutInInfo();
        if( cutInInfo == null ) {
            return;
        }
    
        var commandText:String = cutIn.getCutInMessage(cutInInfo);
        cutIn.effect(commandText);
    }

    private function sendCutIn():void {
        var cutInInfo:Object = getCutInInfo();
        if( cutInInfo == null ) {
            return;
        }
    
        var commandText:String = cutIn.getCutInMessage(cutInInfo);
        ChatWindow.getInstance().sendChatMessage_public(commandText);
    }

    private function addCutInEffect():void {
        status = "";
    
        DodontoF.popup(AddCutInMovieWindow, true);
    }
    
    
    private function removeCutInEffect():void {
        status = "";
        
        var cutInInfos:Object = getCutInInfos();
        checkQuestionForRemoveCutInfEffects(cutInInfos);
    }
    
    private function getCutInInfos():Array {
        var array:Array = cutInInfosList.selectedItems;
        return array;
    }
    
    private function checkQuestionForRemoveCutInfEffects(cutInInfos:Object):void {
        var message:String = "";
        
        var effectIds:Array = new Array();
        
        for(var i:int = 0 ; i < cutInInfos.length ; i++) {
            var cutInInfo:Object = cutInInfos[i];
            Log.logging("cutInInfo", cutInInfo);
            
            message += Language.s.cutInTitle + "：" + cutInInfo.message + "\n";
            // message += Language.s.cutInImageFileName + "：" + cutInInfo.source + "\n";
            
            effectIds.push(cutInInfo.effectId);
        }
        message += "\n";
        message += Language.s.deleteCutInMovieQuestion;
        
        Alert.show(message, Language.s.deleteCutInMovieQuestionTitle, 
                   Alert.OK | Alert.CANCEL, null, 
                   function(e : CloseEvent) : void {
                       if (e.detail == Alert.OK) {
                           removeCutInEffectAfterCheck(effectIds);
                       }});
    }
    
    private function removeCutInEffectAfterCheck(effectIds:Array):void {
        var guiInputSender:GuiInputSender = DodontoF_Main.getInstance().getGuiInputSender();
        guiInputSender.removeEffect(effectIds);
    }


    private function changeCutInEffect():void {
        status = "";
        
        var cutInInfo:Object = getCutInInfo();
        
        if( cutInInfo == null ) {
            return;
        }
        
        if( cutInInfo.effectId == null ) {
            return;
        }
        
        var window:ChangeCutInMovieWindow =
        DodontoF.popup(ChangeCutInMovieWindow, true) as ChangeCutInMovieWindow;
        window.init(cutInInfo);
    }
    
    static public function changeEnableState(params:Object):void {
        if( params.isTail == null ) {
            params.isTail = true;
        }
        
        params.isTail =( ! params.isTail );
        
        var guiInputSender:GuiInputSender = DodontoF_Main.getInstance().getGuiInputSender();
        guiInputSender.changeEffect(params);
    }
    
    private function dragComplete(event:DragEvent):void { 
        var paramsList:Array = Utils.clone(CutInBase.cutInInfos);
        for each(var params:Object in paramsList) {
                delete params.mx_internal_uid;
            }
        
        Log.logging("dragComplete paramsList", paramsList);
        
        var guiInputSender:GuiInputSender = DodontoF_Main.getInstance().getGuiInputSender();
        guiInputSender.changeEffectsAll(paramsList);
    }
    
    ]]>
  </mx:Script>

</torgtaitai:CommonPopupWindow>
